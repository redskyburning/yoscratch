'use strict';

/**
 * @ngdoc directive
 * @name yoscratchApp.directive:sdEditable
 * @description
 * # sdEditable
 */
angular.module('yoscratchApp')
.directive('sdEditable',function(){

    return {
        scope: {},
        transclude: true,
        templateUrl: 'views/editor.html',
        controller: ['$scope','$timeout','$window','rangyService',function($scope,$timeout,$window){
            var $toolbar, $content, $body, $selects, contentBlurTimer, selectBlurTimer;

            // toolbar position
            $scope.position = {
                top: 10,
                left: 10,
                below: false
            };

            $scope.showToolbar = false;

            // current styles of selected elements
            // used to highlight active buttons
            $scope.styles = {};

            var defaultStyles = {
                'bold'      : false,
                'italic'    : false,
                'underline' : false,
                'strike'    : false
            };

            $scope.styles = defaultStyles;

            // tags generated by the editor
            // used to highlight active styles
            /*var generatedTags = {
                'b': '',
                'strong': '',
                'i': '',
                'em': '',
                'u': ''
            };*/

            // position the toolbar above or below the selected text
            var setToolbarPosition = function () {
                var toolbarHeight = $toolbar[0].offsetHeight;
                var toolbarWidth = $toolbar[0].offsetWidth;
                var spacing = 5;
                var selection = window.getSelection();
                var range = selection.getRangeAt(0);
                var boundary = range.getBoundingClientRect();

                var topPosition = boundary.top;
                var leftPosition = boundary.left;

                // if there isn't enough space at the top, place it at the bottom
                // of the selection
                if(boundary.top < (toolbarHeight + spacing)) {
                    $scope.position.top = topPosition + boundary.height + spacing;
                    // tell me if it's above or below the selection
                    // used in the template to place the triangle above or below
                    $scope.position.below = true;
                } else {
                    $scope.position.top = topPosition - toolbarHeight - spacing;
                    $scope.position.below = false;
                }

                // center toolbar above selected text
                $scope.position.left = leftPosition - (toolbarWidth/2) + (boundary.width/2);

                // cross-browser window scroll positions
                var scrollLeft = (window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;
                var scrollTop = (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;

                // add the scroll positions
                // because getBoundingClientRect gives us the position
                // relative to the viewport, not to the page
                $scope.position.top += scrollTop;
                $scope.position.left += scrollLeft;

                return this;
            };

            // get current selection and act on toolbar depending on it
            var checkSelection = function (e) {

                // if you click something from the toolbar
                // don't do anything
                if(e && e.target && $toolbar.find(e.target).length) {
                    return false;
                }

                var sel = $window.rangy.getSelection();
                var range = sel.getRangeAt(0);
                //console.log('ancestor',range.commonAncestorContainer);

                // get selection node
                var anchorNode = sel.anchorNode;
                //console.log('anchorNode',anchorNode);

                // if nothing selected, hide the toolbar
                if(sel.toString().trim() === '' || !anchorNode) {
                    // hide the toolbar
                    return $timeout(function() {
                        $scope.showToolbar = false;
                    });
                }

                // If the range contains other nodes, don't show the toolbar. The user should remove the other node first.
                // TODO: Some kind of error messaging.
                var nodes = range.getNodes([1]);
                if(nodes.length > 0){
                    range.selectNodeContents(nodes[0]);
                    sel.setSingleRange(range);
                    $scope.showToolbar = true;
                    setToolbarPosition();
                }

                // Are is the selection inside of another node inside the editor?
                if($window.$(range.commonAncestorContainer).parentsUntil('.angular-meditor-content').length > 1){
                    // If so, select the whole node.
                    range.selectNodeContents(range.commonAncestorContainer.parentNode);
                    sel.setSingleRange(range);
                    $scope.showToolbar = true;
                    setToolbarPosition();
                }

                // check if selection is in the current editor/directive container
                var parentNode = anchorNode.parentNode;
                while (parentNode.tagName !== undefined && parentNode !== $scope.element[0]) {
                    parentNode = parentNode.parentNode;
                }

                // if the selection is in the current editor
                if(parentNode === $scope.element[0]) {
                    // show the toolbar
                    $timeout(function() {
                        $scope.showToolbar = true;
                        setToolbarPosition();
                    });

                    // check selection styles and active buttons based on it
                    checkActiveButtons(range);
                } else {
                    // hide the toolbar
                    $timeout(function() {
                        $scope.showToolbar = false;
                    });
                }

                return this;
            };

            var getStyles = function($el){
                return {
                    'bold'      : $el.hasClass('style-bold'),
                    'italic'    : $el.hasClass('style-italic'),
                    'underline' : $el.hasClass('style-underline'),
                    'strike'    : $el.hasClass('style-strike')
                };
            };

            // check current selection styles and activate buttons
            var checkActiveButtons = function (range) {
                var $range = $window.$(range.commonAncestorContainer);

                $window.$.extend($scope.styles,defaultStyles,getStyles($range));
                console.log($range);
                console.log($scope.styles);

                /*var parentNode = selection.anchorNode;

                if (!parentNode.tagName) {
                    parentNode = selection.anchorNode.parentNode;
                }

                // TODO underline button activation not working properly
                var childNode = parentNode.childNodes[0];

                if(childNode && childNode.tagName && childNode.tagName.toLowerCase() in generatedTags) {
                    parentNode = parentNode.childNodes[0];
                }

                $timeout(function() {
                    // get real styles of selected element
                    $scope.styles = window.getComputedStyle(parentNode, null);

                });*/

            };

            $scope.init = function(){

                $toolbar = $scope.element.find('.angular-meditor-toolbar');
                $content = $scope.element.find('.angular-meditor-content');
                $selects = $scope.element.find('select');
                $body = angular.element('body');

                // edit all the things
                $content.attr('contenteditable', true);

                // check selection when selecting with the shift key
                $content.bind('keyup', checkSelection);

                // check the selection on every mouseup
                // it also triggeres when releasing outside the browser
                document.addEventListener('mouseup', checkSelection);

                $content.bind('blur', function() {
                    if(contentBlurTimer) {
                        clearTimeout(contentBlurTimer);
                    }
                    contentBlurTimer = setTimeout(checkSelection, 200);
                });

                // if after a selection in the select,
                // the contenteditable doesn't get the focus
                // the toolbar will not hide on blur.
                // so I have to add a blur event to the selects.
                $selects.bind('blur', function() {
                    if(selectBlurTimer) {
                        clearTimeout(selectBlurTimer);
                    }
                    selectBlurTimer = setTimeout(checkSelection, 200);
                });

                // simple edit action - bold, italic, underline
                $scope.SimpleAction = function(action) {
                    document.execCommand('styleWithCSS', false, false);
                    document.execCommand(action, false, null);
                };

                // move the toolbar to the body, we can use overflow: hidden on containers
                $body.append($toolbar);

            };
        }],
        link: function (scope, element) {
            scope.element = element;
            scope.init();
        }
    };

});

